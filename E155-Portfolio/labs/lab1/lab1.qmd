---
title: "Lab1"
---
## Introduction:
In this lab, a development board was assembled to house a UPduino v3.1 FPGA and a Nucleo-L432KC microcontroller. To test the board a design to control a 7 segment display and 3 onboard LEDs was implemented. The 7-segment display and 2 of the onboard LEDs were controlled with combinational logic from a 4 switch input and the third LED was to demonstrate the functionality of the on-board high-speed oscillator by blinking one of the on-board LEDs. The high speed oscillator was configured at a frequency of 48 MHz and divided down using a counter to achieve a blinking frequency of ~2.4 Hz.

## Design and Testing Methodology:
For the hard wear the board was soldered in accordance to the [E155 lab1 instructions](https://hmc-e155.github.io/lab/lab1/#testing-the-boards). The resistor values for the 7-Segment display were derived from the [Datasheet](https://hmc-e155.github.io/assets/doc/MAN64x0%20Series.pdf). Providing a 5v power supply from the board and a 2.1V drop across the diode with an If of 20mA using V=IR a resistor of 220ohms was used. For Digital methodology the on-board high-speed oscillator (HSOSC) from the iCE40 UltraPlus primitive library was used to generate a clock signal at 48 MHz. Then, a counter was used to divide the high frequency clock signal down so that the blinking frequency could be easily visualized using one of the on-board LEDs. The combinational logic for LED's and 7-segment display were taking from the E155 specifications and truth table. 

To test the design a Testbench was made to read a text file of test vectors describing all possible inputs and expected outputs. In simulation the Testbench reads the test file and compares to the DUT which is the top module implementing the above design. To confirm the oscillation an oscilloscope was used to show the frequency at which the LED is blinking. 

## Technical Documentation:
# Code
The source code can be found in the associated [Github repository](https://github.com/Noah-Fotenos/E155/lab1).
# Block Diagram:
![Figure 1: Block Diagram of Verilog design](E155-Portfolio/labs/lab1/images/Lab1_block.jpeg)

The block diagram in Figure 1 demonstrates the overall architecture of the design. The top-level module Lab1_nf includes 3 submodules: the high-speed oscillator block (HSOSC), the clock divider module (counter), and combinational logic block to decode the input signal into hex display encoding for the 7-segment display(nf_seven_seg_disp).

# Schematic
![Figure 2: Schematic of the physical circuit.](E155-Portfolio/labs/lab1/images/Lab1_schematic.jpeg)

Figure 2 shows the physical layout of the design. The output LED was connected using a 1 k $\Omega$ current-limiting resistor to ensure the output current (~2.6 mA) did not exceed the maximum output current of the FPGA I/O pins. The 5v Vcc pin is directly connected to the 7-segment display common anode pin3, with all I/O pins output low to activate the LED segment with 220 $\Omega$ to have the 20mA current for typical brightness. 

## Results and Discussion:

# Testbench Simulation:
![Figure 3: A screenshot of a QuestaSim simulation demonstrating the input and output signals in waveform](E155-Portfolio/labs/lab1/images/testbench.jpg)
![Figure 4: A screenshot of a QuestaSim simulation demonstrating testvectors of all combinational inputs passed with 0 failures](E155-Portfolio/labs/lab1/images/results.jpg)

Results show the design met all intended objectives while passing all tests in simulation. If a more precise output frequency was desired, a more sophisticated counter could be developed. The current design only allows for the clock to be divided by powers of two.

## Conclusion

The design successfully blinked an external LED using the on-board high-speed oscillator as well as displayed all Hexidecimal representation of a 4-bit input from onboard switches along with 2 gate controlled onboard LEDs. This lab took around 8 hours.

## AI Prototype Summary

ChatGPT was very fast to generate the entire Verilog module with "Internal HFOSC instantiation" and "Blink counter" code blocks. However the code failed do to miss instantiating the HFOSC writing "SB_HFOSC". I was impressed that it went beyond the prompt and warned about if the led is pull down or not: "If your LED is active-low, just change the toggle line to led <= ~led; starting from led = 1'b1;" I thought this was surprising since it went into implementation. It also asked if I wanted to generate a testbench to run in simulation. I was impressed less by the code it generated but how usefull it would be as a partner for a larger scale project to provide help and extra information. 


